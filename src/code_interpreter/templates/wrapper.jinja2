{# Minimal template for Python code execution with improved output handling #}
import sys, json, traceback, tempfile, os, time
import numpy as np
from pathlib import Path

ROOT = Path(__file__).resolve()
while not (ROOT / ".git").exists():
    ROOT = ROOT.parent
sys.path.append(str(ROOT))


try:
    # Code Interpreter utils: tracer
    from viztracer import log_sparse
    from src.code_interpreter.tracy import VarTracer
    # DSL
    from src.dsl.arc_types import *
    from src.dsl.dsl import *
    from src.dsl.constants import *
    from src.utils import jdumps, get_shape
except ModuleNotFoundError as e:
    print(ROOT, file=sys.stderr)
    raise e

RELPATH = f'src/tmp/{os.getpid()}.json'

Is = {{ input }} 

{{ code_literal }}

if 'solve' not in globals():
    raise SyntaxError("No `solve` function found")

try:
    tracer = VarTracer()
    
    Os = []
    for I in Is:
        tracer.start()
        O = solve(I)
        tracer.export()
        Os.append(O)

    data = {
        "I": Is,
        "O": Os,
        "I_shapes": [get_shape(I) for I in Is],
        "O_shapes": [get_shape(O) for O in Os],
        "intermediates": tracer.vartraces
    }
    
    fname = (ROOT / RELPATH).resolve()
    fname.parent.mkdir(parents=True, exist_ok=True)
    with open(fname, 'w') as f:
        f.write(jdumps(data))
        #son.dump(tracer.traces, f)
        print(fname, file=sys.stdout) # Pass fname over subprocess, to read by caller

except Exception as e:
    print(f"Subprocess ", end="", file=sys.stderr)
    raise e